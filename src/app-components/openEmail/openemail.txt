  openEmailClient(): void {
    this.subscription.add(this.translationUtilities.fetchTranslations('financials.creditLineReview.requestCreditLineSubject', {payerNumber : this.selectedPayer}).pipe(
      combineLatestWith(
        this.translationUtilities.fetchTranslations('financials.creditLineReview.emailBody.messageBody1'),
        this.translationUtilities.fetchTranslations('financials.creditLineReview.emailBody.messageBody2'),
        this.translationUtilities.fetchTranslations('financials.creditLineReview.emailBody.temporaryCreditLineOptions'),
        this.translationUtilities.fetchTranslations('financials.creditLineReview.emailBody.permanentCreditLineOptions'),
        this.translationUtilities.fetchTranslations('financials.creditLineReview.emailBody.messageFooter')
      )
    ).subscribe(([requestCreditLineSubject, messageBody1, messageBody2, temporaryOptions, permanentOptions, messageFooter]) => {
      const email = CREDIT_TEAM_EMAIL;
      const subject = requestCreditLineSubject;
      const optionList = this.selectedRequestType === TEMPORARY_CREDIT_LINE_INCREASE ? temporaryOptions : permanentOptions;
      const uri = 
      `${messageBody1}\n`+
      `${messageBody2}\n`+
      `${optionList}\n\n`+
      `\n${messageFooter}`;
      const mailtoLink = `mailto:${email}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(uri)}`;
      window.location.href = mailtoLink;
    }
    ));
  }

  ####################Logic to delay api call#######################
this.subscription.add(
      this.customerSelectionForm.controls.searchTerm.valueChanges
        .pipe(debounceTime(300))
        .subscribe((searchTermValue) => {
          this.handleSearchTerm(searchTermValue);
        })
    ); 


#######################################Spartacus Best Practices########################################
Array operations: ex: concat(), slice(), splice(), shift(), unshift(), some(),sort(), every(), filter(), find(), foreach(), map(), reduce(), reduceRight().
Donâ€™t manipulate the document (DOM) directly. Use OOTB WindowRef, ElementRef,.. 

############################Overriding services##########################
providers: [
    AsmDisableService,
    {
      provide: USER_NORMALIZER,
      useClass: MhUserNormalizer,
      multi: true,
    },
    SystemAvailableService,
    { provide: AuthRedirectService, useExisting: MarkethubRedirectService },
    { provide: BaseSiteService, useExisting: MarkethubBaseSiteService },
    { provide: ProtectedRoutesGuard, useExisting: MarkethubProtectedRoutesGuardService },

#############import data from csv ###############
UPDATE CountryLanguages;code[unique=true];languageName[lang=cs]
"#% CSVReader reader = new CSVReader( ImpExManager.class.getResourceAsStream(""/markethubinitialdata/import/coredata/common/data/CountryLanguages_cs.csv""), ""utf-8"" );"
"#% reader.setMaxBufferLines(100000);"
"#% reader.setFieldSeparator(new char[] {','});"
"#% impex.includeExternalData( reader, 0, -1 );"



####################routing with tabs each tab will redirect to other page#####
<div class="mb-usf-grids mbusf--consumer-feedback mbusf-site-logistics container">
    <mat-tab-group class="mbusf-tabs" [(selectedIndex)]="selectedIndex$" 
    (selectedTabChange)="select($event)">
        <mat-tab label="{{ 'supply.allocations' | cxTranslate}}">
            <app-us-cf-allocations></app-us-cf-allocations>
        </mat-tab>
        <mat-tab label="{{ 'supply.bols' | cxTranslate}}"></mat-tab>
        <mat-tab label="{{ 'supply.carrierDriverLastLift' | cxTranslate}}"></mat-tab>
        <mat-tab label="{{ 'supply.terminalPeakTimes' | cxTranslate}}"></mat-tab>
        <mat-tab label="{{ 'supply.supplyNotices' | cxTranslate}}"></mat-tab>

    </mat-tab-group>
</div>

select(event: { index: number, tab: MatTab }) {
    this.selectedIndex$ = event.index;
    switch(event.index) {
      case 0: {
        this.routingService.goByUrl('/uscf/supply?tab=allocations');
        break;
      }
      case 1: {
        this.routingService.goByUrl('/uscf/supply?tab=bols');
        break;
      }
      case 2: {
        this.routingService.goByUrl('/uscf/supply?tab=carrierDriverLastLift');
        break;
      }
      case 3: {
        this.routingService.goByUrl('/uscf/supply?tab=terminalPeakTimes');
        break;
      }
      case 4: {
        this.routingService.goByUrl('/uscf/supply?tab=supplyNotices');
        break;
      }
      default: {
        this.routingService.goByUrl('/uscf/supply?tab=allocations');
      }
    }
  }
############################################Router mailtoLink
<a id="user_myProfile_link" [routerLink]="['/profile']" role="link"
              [attr.aria-label]="'header.myAccountLogin.myProfile' | cxTranslate">{{ "header.myAccountLogin.myprofile" | cxTranslate }}</a>


####################Form creation and submit in ts file##############
private readonly renderer: Renderer2;
redirectWithPostData(redirectUrl, redirectInputInfo) {
    const form = this.renderer.createElement('form');
    this.renderer.setAttribute(form, 'method', 'POST');
    this.renderer.setAttribute(form, 'target', '_blank');
    this.renderer.setAttribute(form, 'action', redirectUrl);

    Object.keys(redirectInputInfo).forEach(key => { 
      const input = this.renderer.createElement('input');
      this.renderer.setAttribute(input, 'type', 'hidden');
      this.renderer.setAttribute(input, 'name', key);
      this.renderer.setAttribute(input, 'value', redirectInputInfo[key]);
      this.renderer.appendChild(form, input);
    });
    this.renderer.appendChild(document.body, form);
    form.submit();
  }
  
##################################To check global route navigation#################
this.router.events
      .pipe(
        takeUntil(this.destroy$),
        filter((event) => event instanceof NavigationStart)
      )
      .subscribe((event: NavigationStart) => {
        const targetUrl = event?.url;
        const currentRoute = this.router.routerState;
        const urlTree = this.router.parseUrl(targetUrl || '');
        if (event?.url.indexOf(CF_CREATE_ORDER_NAV) > 0) {
          this.router.navigateByUrl(currentRoute.snapshot.url, {
            skipLocationChange: false,
          });
          if (this.analyticsEventService.isCfCustomer() || this.analyticsEventService.isAvlCustomer()) {
            this.analyticsEventService.entryEvent(NEW_ORDER_CREATE, NEW_ORDER_NAVIGATION);
          }
          this.cfAccountsService.openAccountDetailsModal(this.shipTos);
        } else if (targetUrl?.includes(SSO_LEGAL_DISCLAIMER_URL) && urlTree?.queryParams?.id) {
          this.router.navigateByUrl(currentRoute.snapshot.url, {
            skipLocationChange: false,
          });
          this.thirdPartySsoService.openLegalDiclaimerModal(urlTree?.queryParams?.id);
        }
      });
##############################include dynamic js#################################
loadScripts(): void {
    
    const dynamicScripts = [
      {
        path: '../../../assets/js/jquery-1.12.4.js',
        id: 'mcms_jquery'
      },
      {
        path: '../../../assets/js/bootstrap.js',
        id: 'mcms_bootstrap'
      }

  ];
   if(this.downloadJs){
      dynamicScripts.push({id: 'mcms_external', path: this.downloadJs});
    }
    for (const script of dynamicScripts) {
      if (!this.winRef.document.getElementById(script.id) || script.id === 'mcms_external') {
        const node = this.winRef.document.createElement('script');
        node.src = script.path;
        node.id = script.id;
        node.type = 'text/javascript';
        node.async = false;
        this.winRef.document.getElementsByTagName('head')[0].appendChild(node);
      }
    }
  }
  
#################################################HOw different environment files are maintained############
export const environment = {
  settings: 'default',
  production: false,
  staging: false,
  development: true,
  storeFrontConfig: {
    backend: {
      occ: {
        baseUrl:'https://api.s1.markethub2.shell.com',
        prefix: '/occ/v2/',
        legacy: false,
      },
    },
    authentication: {
      client_id: 'mobile_android',
      client_secret: 'secret',*************
	  
	  
import { environment as dev } from '../../../environments/environment.dev';
import { environment as prod } from '../../../environments/environment.prod';
import { environment as uat } from '../../../environments/environment.uat';
import { environment as s4 } from '../../../environments/environment.s4';
import { environment as s3 } from '../../../environments/environment.s3';

getEnvironemnt() {
    const endpoint = window.location.href.toLowerCase();
    if (endpoint.includes(WebConstants.D1)) {
      return dev;
    } else if (endpoint.includes(WebConstants.ORIGIN_S1) || endpoint.includes(WebConstants.GREEN_ORIGIN_S1) ) {
      return qa;
    } else if (endpoint.includes(WebConstants.P1) || endpoint.includes(WebConstants.ORIGIN_P1) || endpoint.includes(WebConstants.GREEN_ORIGIN_P1)) {
      return prod;
    } else if (endpoint.includes(WebConstants.AKAMAI_S2) || endpoint.includes(WebConstants.GREEN_ORIGIN_S2) || endpoint.includes(WebConstants.ORIGIN_S2)) {
      return uat;
    } else if (endpoint.includes(WebConstants.ORIGIN_S4)) {
      return s4;
    } else if (endpoint.includes(WebConstants.ORIGIN_S3)) {
      return s3;
    } else {
      return local;
    }
  }
  
########################Ways to read modal##########################
  dfoaExit(){
    let modalRef = this.modalService.open(ExitOrderModalComponent, {
      centered: true,
      size: 'lg',
      windowClass: 'exit-order-modal',
    });
    let cInstance = modalRef.componentInstance;
    modalRef.result.finally(() => {
      if (cInstance.isExit) {
        this.navigated = true;
        this.accountLocationService.quitDFOACreateOrderFlow(true);
        this.routing.goByUrl(DFOA_HOME_PAGE);
      }
    });
  }
  
  openUploadPinModal(): void {
    this.modalRef = this.modalService.open(UsCfUploadPinModalComponent, {
      windowClass: 'modal-dialog-centered cf-us-uploadpin',
      centered: true,
      size: 'lg'
    });
    this.subscription.add(this.modalRef.modalClose.asObservable().subscribe((data) => {
      if(data === 'success') {
        this.uploadClicked = true;
      }
    }));
    this.analyticsActionEvent(UPLOAD_PINS, this.uscfService.tabs[this.buttonSelected]);
  }
######################################Base http service###################
getCMTerminalData(soldTos: string[]): Observable<FilterData[]> {
      const body = { soldTos} // if parameter name is same then use shorthand
      const headers = this.http.getJsonHttpHeader();
      return this.http.post<FilterData[]>(CM_TERMINALS, body, {}, {headers});
    }
	####################